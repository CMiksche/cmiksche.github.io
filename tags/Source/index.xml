<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Source on M5E&#39;s Blog</title>
    <link>https://blog.m5e.de/tags/Source/</link>
    <description>Recent content in Source on M5E&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.m5e.de/tags/Source/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Drone CI with Podman</title>
      <link>https://blog.m5e.de/post/drone-ci-with-podman/</link>
      <pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.m5e.de/post/drone-ci-with-podman/</guid>
      <description>I run Drone CI for a longer period now with Docker. Because I decided to switch for multiple reasons from Docker to Podman, this setup had to be changed a bit.
In this blog post, I want to cover how to install Podman and how to set up Drone so that it works with Podman.
Installing Podman Install the podman and podman-docker packages. E.g. on a Debian based System:
apt install podman podman-docker If you currently use docker-compose, then you should also install podman-compose:</description>
      <content>&lt;p&gt;I run Drone CI for a longer period now with Docker. Because I decided to switch for multiple reasons from Docker to Podman, this setup had to be changed a bit.&lt;/p&gt;
&lt;p&gt;In this blog post, I want to cover how to install Podman and how to set up Drone so that it works with Podman.&lt;/p&gt;
&lt;h2 id=&#34;installing-podman&#34;&gt;Installing Podman&lt;/h2&gt;
&lt;p&gt;Install the &lt;code&gt;podman&lt;/code&gt; and &lt;code&gt;podman-docker&lt;/code&gt; packages. E.g. on a Debian based System:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install podman podman-docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you currently use &lt;code&gt;docker-compose&lt;/code&gt;, then you should also install &lt;code&gt;podman-compose&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install podman-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After installing Podman, it could be that you will not find docker images. For that, you should add the following lines to &lt;code&gt;/etc/containers/registries.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[registries.search]
registries = [&#39;quay.io&#39;, &#39;docker.io&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuring-drone-ci&#34;&gt;Configuring Drone CI&lt;/h2&gt;
&lt;p&gt;Drone CI uses a mapping of the Docker Socket. This mapping has to be changed so that Drone CI thinks that Podman is our Docker instance.&lt;/p&gt;
&lt;p&gt;First, we need to find out where the current podman socket is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status podman.socket
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, something like &lt;code&gt;/run/podman/podman.sock&lt;/code&gt; should be written.&lt;/p&gt;
&lt;p&gt;In my case, with docker-compose, I had to change volumes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;volumes:
    - &#39;/run/podman/podman.sock:/var/run/docker.sock&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you start Drone from the CLI, a config could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo podman run -d \
    -e DRONE_RPC_PROTO=&amp;quot;https&amp;quot; \
    -e DRONE_RPC_HOST=&amp;quot;YOURDOMAIN&amp;quot; \
    -e DRONE_RPC_SECRET=&amp;quot;YOUR_SECRET&amp;quot; \
    -e DRONE_RUNNER_CAPACITY=2 \
    -e DRONE_RUNNER_NAME=&amp;quot;NAME&amp;quot; \
    --restart always \
    --name runner \
    -v /run/podman/podman.sock:/var/run/docker.sock \
    docker.io/drone/drone-runner-docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it. Obviously you have to enable and start the services, but running Drone with Podman is easier than you think.&lt;/p&gt;
&lt;h2 id=&#34;want-to-keep-your-drone-and-podman-instance-uptodate&#34;&gt;Want to keep your Drone and Podman Instance uptodate?&lt;/h2&gt;
&lt;p&gt;Checkout &lt;a href=&#34;https://chapati.systems/autoupdate/&#34;&gt;Autoupdate&lt;/a&gt;. One tool to update various software which has no built-in auto update functionality.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Linux: Setup ZITADEL with PostgreSQL</title>
      <link>https://blog.m5e.de/post/linux-setup-zitadel-with-postgresql/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.m5e.de/post/linux-setup-zitadel-with-postgresql/</guid>
      <description>In this Guide, I want to cover installing ZITADEL with PostgreSQL on a Linux system. Please be aware that PostgreSQL support is still in Beta at the time of this writing, and you will need a PostgreSQL installation with Version 14 or higher.
NGINX Proxy Create a new subdomain and point it to your server. Use certbot -d domain.name for creating a new SSL Cert. Create a new file in /etc/nginx/sites-available/domainname</description>
      <content>&lt;p&gt;In this Guide, I want to cover installing ZITADEL with PostgreSQL on a Linux system. Please be aware that PostgreSQL support is still in Beta at the time of this writing, and you will need a PostgreSQL installation with Version 14 or higher.&lt;/p&gt;
&lt;h2 id=&#34;nginx-proxy&#34;&gt;NGINX Proxy&lt;/h2&gt;
&lt;p&gt;Create a new subdomain and point it to your server. Use &lt;code&gt;certbot -d domain.name&lt;/code&gt; for creating a new SSL Cert. Create a new file in &lt;code&gt;/etc/nginx/sites-available/domainname&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    server_name domain.com;

    listen 443 ssl;

    ssl_certificate     /etc/letsencrypt/live/domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    location / {
        grpc_pass grpc://localhost:8080;
        grpc_set_header Host $host:$server_port;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;caddy&#34;&gt;Caddy&lt;/h2&gt;
&lt;p&gt;For caddy, the following Config should be set in the &lt;code&gt;Caddyfile&lt;/code&gt; (e.g. &lt;code&gt;/etc/caddy/Caddyfile&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;domain.com {
    reverse_proxy h2c://localhost:8080
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;postgresql&#34;&gt;PostgreSQL&lt;/h2&gt;
&lt;p&gt;We need a database for the software. This can be created by the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -u postgres psql
postgres=# create database zitadel;
postgres=# create user zitadel with encrypted password &#39;mypass&#39;;
postgres=# grant all privileges on database zitadel to zitadel;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;config-file&#34;&gt;Config File&lt;/h2&gt;
&lt;p&gt;I often create directories for software in &lt;code&gt;/opt/projectname&lt;/code&gt;. Then a &lt;code&gt;config.yaml&lt;/code&gt; file could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ExternalSecure: true
ExternalDomain: &#39;domain.name&#39;
ExternalPort: 443

Database:
    postgres:
        Host: localhost
        Port: 5432
        Database: zitadel
        MaxOpenConns: 25
        MaxConnLifetime: 1h
        MaxConnIdleTime: 5m
        Options:
        User:
            Username: zitadel
            Password: zitadel
            SSL:
                Mode: disable
                RootCert:
                Cert:
                Key:
        Admin:
            Username: postgres
            Password: postgres
            SSL:
                Mode: disable
                RootCert:
                Cert:
                Key:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should also create an &lt;code&gt;init.yaml&lt;/code&gt; file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FirstInstance:
    Org:
        Human:
        # use the loginname root@zitadel.localhost
        Username: &#39;root&#39;
        Password: &#39;RootPassword1!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Use the following command to download and install Zitadel:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LATEST=$(curl -i https://github.com/zitadel/zitadel/releases/latest | grep location: | cut -d &#39;/&#39; -f 8 | tr -d &#39;\r&#39;); wget -qO-  https://github.com/zitadel/zitadel/releases/download/$LATEST/zitadel_Linux_$(uname -m).tar.gz  | tar -xz zitadel &amp;amp;&amp;amp; sudo mv zitadel /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;masterkey&#34;&gt;Masterkey&lt;/h2&gt;
&lt;p&gt;We should generate and save an masterkey:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;$(tr -dc A-Za-z0-9 &amp;lt;/dev/urandom | head -c 32)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;
&lt;p&gt;For the first run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zitadel start-from-init \
    --config /opt/zitadel/config.yaml \
    --steps /opt/zitadel/init.yaml \
    --masterkey &amp;quot;${ZITADEL_MASTERKEY}&amp;quot; \
    --tlsMode external
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now visit &lt;code&gt;https://domain.name/ui/console&lt;/code&gt; and you can log in.&lt;/p&gt;
&lt;p&gt;If your custom username and password don&amp;rsquo;t work, then try out the default account:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;username: &lt;code&gt;root@zitadel.localhost&lt;/code&gt; or &lt;code&gt;zitadel-admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;password: &lt;code&gt;RootPassword1!&lt;/code&gt; or &lt;code&gt;Password1!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, you can start it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zitadel start \
    --config /opt/zitadel/config.yaml \
    --masterkey &amp;quot;${ZITADEL_MASTERKEY}&amp;quot; \
    --tlsMode external
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;systemd-daemon&#34;&gt;Systemd Daemon&lt;/h2&gt;
&lt;p&gt;I also set up a custom systemd daemon. For that, create a new file in &lt;code&gt;/etc/systemd/system&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Custom Zitadel
After=postgresql.service

[Service]
RestartSec=2s
Type=simple
User=zitadel
WorkingDirectory=/opt/zitadel
ExecStart=/usr/local/bin/zitadel start --config /opt/zitadel/config.ya
ml --masterkey YOUR_MASTERKEY --tlsMode external
Environment=USER=zitadel HOME=/opt/zitadel
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;That was it. Surprisingly easy. The ZITADEL team is also really fast responding to problems. I had some issues with the beta software, and all of these issues were fixed after a few days.&lt;/p&gt;
&lt;p&gt;This post was even mentioned by their company account:&lt;/p&gt;

  &lt;blockquote class=&#34;twitter-tweet&#34; data-dnt=&#34;true&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thank you &lt;a href=&#34;https://twitter.com/CMiksche?ref_src=twsrc%5Etfw&#34;&gt;@CMiksche&lt;/a&gt; for creating this awesome guide 🙏🏻 We are sure it will help people getting started with ZITADEL using &lt;a href=&#34;https://twitter.com/hashtag/postgreSQL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#postgreSQL&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/hashtag/NGINX?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#NGINX&lt;/a&gt; &lt;a href=&#34;https://t.co/DGGDIuiDFJ&#34;&gt;https://t.co/DGGDIuiDFJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; ZITADEL (@zitadel) &lt;a href=&#34;https://twitter.com/zitadel/status/1567445067308187651?ref_src=twsrc%5Etfw&#34;&gt;September 7, 2022&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;want-to-keep-your-zitadel-uptodate&#34;&gt;Want to keep your Zitadel uptodate?&lt;/h2&gt;
&lt;p&gt;Checkout &lt;a href=&#34;https://chapati.systems/autoupdate/&#34;&gt;Autoupdate&lt;/a&gt;. One tool to update various software which has no built-in auto update functionality.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Open Source Authentication Solutions</title>
      <link>https://blog.m5e.de/post/open-source-authentication-solutions/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.m5e.de/post/open-source-authentication-solutions/</guid>
      <description>Imagine you run a company and provide multiple web applications for your customers. In the beginning, you probably created a user table and the authentication methods yourself, but from the second application onwards, you will think about using already made open source solutions.
That&amp;rsquo;s the situation I am in right now. I run multiple web applications, which each have their own auth mechanisms and user tables. This means, a user from App1 can&amp;rsquo;t use App2 unless he creates a new account.</description>
      <content>&lt;p&gt;Imagine you run a company and provide multiple web applications for your customers. In the beginning, you probably created a user table and the authentication methods yourself, but from the second application onwards, you will think about using already made open source solutions.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the situation I am in right now. I run multiple web applications, which each have their own auth mechanisms and user tables. This means, a user from App1 can&amp;rsquo;t use App2 unless he creates a new account.&lt;/p&gt;
&lt;h2 id=&#34;oauth&#34;&gt;OAuth&lt;/h2&gt;
&lt;p&gt;Before I proceed, let&amp;rsquo;s have a short look how OAuth works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OAuth Clients: That&amp;rsquo;s your typical web application which offers a login via 3rd parties like Google and Facebook&lt;/li&gt;
&lt;li&gt;OAuth Servers / Providers: That is an identity provider like e.g. Google or Facebook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you add OAuth to your app, most of the time you just add a OAuth client. That means, customers can log in with existing accounts from other services like Google or Facebook. But they can&amp;rsquo;t use their account at your app for logging into other apps.&lt;/p&gt;
&lt;p&gt;When you provide a OAuth server, customers can log in into your applications and also login into 3rd party applications via the API of your identity server.&lt;/p&gt;
&lt;h3 id=&#34;what-oauth-means-in-my-case&#34;&gt;What OAuth means in my case&lt;/h3&gt;
&lt;p&gt;If I would just add OAuth client functionality to my apps, then users could use e.g. their Google Account for all my apps, but my apps wouldn&amp;rsquo;t be connected with each other. Every single app would be displayed as 3rd party on the Google website, and every single app would need to authenticate with Google.&lt;/p&gt;
&lt;p&gt;Because I want to provide one login for all Apps (single sign-on - SSO), just adding a OAuth client like most apps do, wouldn&amp;rsquo;t solve this problem.&lt;/p&gt;
&lt;p&gt;I need a OAuth server which provides one single identity and one single login to all my apps. This means, all my apps become OAuth clients of my own OAuth server and my OAuth server itself is e.g. a OAuth client for other OAuth servers like Google.
That way, a user could log in into my OAuth server with his existing Google Account and then continue to use all my apps.&lt;/p&gt;
&lt;p&gt;So far the theory, now let&amp;rsquo;s look at the realization.&lt;/p&gt;
&lt;h2 id=&#34;backend-as-a-service-baas&#34;&gt;Backend-as-a-Service (BaaS)&lt;/h2&gt;
&lt;p&gt;In the modern world, solutions like Supabase, PocketBase, Firebase, Appwrite or Parse Server are getting used more and more. One of the reasons is because they handle authentication for you.&lt;/p&gt;
&lt;p&gt;There is just one big catch: Nearly all the BaaS solutions are just OAuth Clients! Every single application which you create on them will get their own user table and additionally, you often can&amp;rsquo;t connect custom OAuth Servers but only the popular ones like Google, Facebook, Twitter, GitHub,&amp;hellip;&lt;/p&gt;
&lt;p&gt;So my problem wouldn&amp;rsquo;t be solved, because I would still have different user tables and separate login processes. So every single app would be displayed on the Google website as a different OAuth client.&lt;/p&gt;
&lt;h2 id=&#34;openid-connect--oauth2-servers&#34;&gt;OpenID Connect / OAuth2 Servers&lt;/h2&gt;
&lt;p&gt;Maybe you have already heard of applications like Keycloak, Ory Hydra, ZITADEL and SuperTokens. These are all auth providers which basically allow you to become some Identity provider like Google yourself.&lt;/p&gt;
&lt;p&gt;It could be, that you already run a OAuth2 server without knowing it. E.g. Gitea has such a functionality built-in. I configured my Gitea instance to act as a OAuth server for e.g. my continuous integration and project management applications. I recently also found out, that my ERP Systems would also support auth via OAuth2, so I could set up all the apps inside my company to work just with the Gitea user auth.&lt;/p&gt;
&lt;p&gt;If you set up an identity server like ZITADEL, then you have to integrate it into all your apps which may be time-consuming in the beginning, but it is absolutely rewarding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will never have to create a user table again&lt;/li&gt;
&lt;li&gt;Login isn&amp;rsquo;t different for every app, but handled by one service only&lt;/li&gt;
&lt;li&gt;If users are logged into your main provider, then all your client applications don&amp;rsquo;t need the user to enter username and password again&lt;/li&gt;
&lt;li&gt;Modern auth servers support passwordless auth like FaceID, TouchID or Windows Hello&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A bit more information about such services:&lt;/p&gt;
&lt;h3 id=&#34;keycloak&#34;&gt;Keycloak&lt;/h3&gt;
&lt;p&gt;One of the oldest and most famous auth servers. Complicated and written in Java.&lt;/p&gt;
&lt;h3 id=&#34;ory-hydra&#34;&gt;Ory Hydra&lt;/h3&gt;
&lt;p&gt;Modern, written in Go but still complicated in my opinion (Ory provides multiple packages for their auth solutions and it is hard to figure out which of them you need and how to configure them)&lt;/p&gt;
&lt;h3 id=&#34;zitadel&#34;&gt;ZITADEL&lt;/h3&gt;
&lt;p&gt;Modern, written in GoLang and in my opinion the one which is easiest to understand.&lt;/p&gt;
&lt;h3 id=&#34;supertokens&#34;&gt;SuperTokens&lt;/h3&gt;
&lt;p&gt;Another open source auth server written in Java.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;When I began exploring open source authentication solutions, I was thinking maybe some BaaS platform would help me. After figuring out what I wanted, it was clear that Backend-as-a-Service providers aren&amp;rsquo;t a solution for me and I had to look at a completely different kind of software category.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know which kind of OAuth2 Server I will stick with over the long time, but I am sure that I will use them.&lt;/p&gt;
&lt;h2 id=&#34;want-to-keep-your-zitadel-instance-uptodate&#34;&gt;Want to keep your Zitadel Instance uptodate?&lt;/h2&gt;
&lt;p&gt;Checkout &lt;a href=&#34;https://chapati.systems/autoupdate/&#34;&gt;Autoupdate&lt;/a&gt;. One tool to update various software which has no built-in auto update functionality.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Open Source Social Media Management Tools</title>
      <link>https://blog.m5e.de/post/open-source-social-media-management-tools/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.m5e.de/post/open-source-social-media-management-tools/</guid>
      <description>As a Startup founder, marketing is one of the biggest topics you have to take care of. There are tons of marketing automation tools, and most of them aren&amp;rsquo;t cheap. I found several open source social media management tools, of which some of them are getting used by me for multiple years now.
Socioboard Socioboard is your full-blown social media management tool. It is open source and offers all the features you know from paid tools like Buffer, Hootsuite and others.</description>
      <content>&lt;p&gt;As a Startup founder, marketing is one of the biggest topics you have to take care of. There are tons of marketing automation tools, and most of them aren&amp;rsquo;t cheap.
I found several open source social media management tools, of which some of them are getting used by me for multiple years now.&lt;/p&gt;
&lt;h3 id=&#34;socioboard&#34;&gt;Socioboard&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/socioboard/Socioboard-5.0&#34;&gt;Socioboard&lt;/a&gt; is your full-blown social media management tool. It is open source and offers all the features you know from paid tools like Buffer, Hootsuite and others.&lt;/p&gt;
&lt;p&gt;Schedule posting, use Content-Libraries, manage multiple accounts, use analytics for checking out your target audience,&amp;hellip;&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t tested it yet, and the installation progress is complicated. Besides that, one of the Developers &lt;a href=&#34;https://github.com/socioboard/Socioboard-5.0/issues/399&#34;&gt;says it is unusable&lt;/a&gt; and created an &lt;a href=&#34;https://github.com/vaughngx4/OpenSMM&#34;&gt;alternative&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;feed2tweet&#34;&gt;feed2tweet&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/chaica/feed2tweet&#34;&gt;feed2tweet&lt;/a&gt; is a small open source python package which allows you to post content from your RSS feed automatically to Twitter.&lt;/p&gt;
&lt;p&gt;I use it since multiple years, but I had to fix some issues which aren&amp;rsquo;t merged at the time of writing. So you should better checkout the PR section and maybe install my fork instead.&lt;/p&gt;
&lt;h3 id=&#34;feed2toot&#34;&gt;feed2toot&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/chaica/feed2toot&#34;&gt;feed2toot&lt;/a&gt; is from the same author like feed2tweet. It offers posting RSS feed content to Mastodon instead of Twitter.&lt;/p&gt;
&lt;p&gt;Here the developer merged my PRs and everything should work.&lt;/p&gt;
&lt;h3 id=&#34;pod-feeder&#34;&gt;pod-feeder&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/brianodonnell/pod_feeder_v2&#34;&gt;pod-feeder&lt;/a&gt; is also an open source tool which makes automatically posting RSS feed content to Diaspora easy.&lt;/p&gt;
&lt;p&gt;I am not sure how many people actively use Diaspora, so maybe that&amp;rsquo;s not so important to you.&lt;/p&gt;
&lt;h3 id=&#34;zapier-ifttt-dlvrit&#34;&gt;Zapier, IFTTT, dlvr.it&lt;/h3&gt;
&lt;p&gt;Not open source, but I use the free plan from Zapier for automatically publishing the blog posts from this blog to Medium.&lt;/p&gt;
&lt;p&gt;dlvr.it and IFTTT also offer free plans and can be used for publishing content from an RSS feed to a social media network.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;There are some open source tools out there. In combination with free plans from different social media automation companies, you can basically build your social media marketing tool stack for free.&lt;/p&gt;
&lt;p&gt;feed2tweet, feed2toot and pod-feeder are all written in python. So it should be possible to create one python package for automating the publishing process to Twitter, Mastodon and Diaspora.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
