<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotfiles on M5E&#39;s Blog</title>
    <link>https://blog.m5e.de/tags/Dotfiles/</link>
    <description>Recent content in Dotfiles on M5E&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.m5e.de/tags/Dotfiles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keeping your Dotfiles in Sync and your Secrets in Gopass</title>
      <link>https://blog.m5e.de/post/keeping-your-dotfiles-in-sync-and-your-secrets-in-gopass/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.m5e.de/post/keeping-your-dotfiles-in-sync-and-your-secrets-in-gopass/</guid>
      <description>Inspired by solutions how Secrets are being handled in corporate DevOps environments, I wanted to keep my Dotfiles on multiple machines in Sync and store all sensitive information inside gopass (which I started using instead of KeePass some time ago since I like the CLI and Unix / KISS aspect of it)
Luckily, I am not the first one to have such desires and I came across chezmoi which manages your Dotfiles for you inside a Git Repo and which also has support for gopass.</description>
      <content>&lt;p&gt;Inspired by solutions how Secrets are being handled in corporate DevOps environments, I wanted to keep my Dotfiles on multiple machines in Sync and store all sensitive information inside &lt;a href=&#34;https://www.gopass.pw/&#34;&gt;gopass&lt;/a&gt; (which I started using instead of KeePass some time ago since I like the CLI and Unix / KISS aspect of it)&lt;/p&gt;
&lt;p&gt;Luckily, I am not the first one to have such desires and I came across &lt;a href=&#34;https://www.chezmoi.io/&#34;&gt;chezmoi&lt;/a&gt; which manages your Dotfiles for you inside a Git Repo and which also has support for gopass.&lt;/p&gt;
&lt;p&gt;However, there are not so many articles out there how to do such a setup concretely and the ones which are out there are for e.g. &lt;a href=&#34;https://dev.to/jmc265/using-bitwarden-and-chezmoi-to-manage-ssh-keys-5hfm&#34;&gt;BitWarden&lt;/a&gt; - so not really for the tools I described.&lt;/p&gt;
&lt;h2 id=&#34;lets-do-this&#34;&gt;Let&amp;rsquo;s do this!&lt;/h2&gt;
&lt;p&gt;To do the setup I described, one should first follow the official installation and getting started guides from gopass and chezmoi. I will not explain this here as there are many good guides out there (the best ones are the ones from the developers themselves) and because such tools also change with time and I will likely not update this blog post often.&lt;/p&gt;
&lt;h3 id=&#34;saving-the-secrets-in-gopass&#34;&gt;Saving the Secrets in Gopass&lt;/h3&gt;
&lt;p&gt;When saving the secrets, we have to think about how chezmoi will get the secret out. Currently the &lt;code&gt;gopass&lt;/code&gt; function of chezmoi will only return the first line of the secret.
That means while we could save e.g. a SSH Private Key in Raw, chezmoi will only read the first line of the Key, so we should better convert the SSH Private Key first.&lt;/p&gt;
&lt;p&gt;We can simply convert SSH Private Key in one line by running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat id_rsa | base64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will output one line of the SSH Private Key encoded in Base64. This is the secret we should store in gopass.&lt;/p&gt;
&lt;h3 id=&#34;getting-the-secret-with-chezmoi&#34;&gt;Getting the Secret with chezmoi&lt;/h3&gt;
&lt;p&gt;After setting up chezmoi we can add the files we want chezmoi to manage. For the public part of a SSH Key this is quite easy:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chezmoi add .ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will add the public part of the SSH Key to chezmoi. However, the private part is a bit more tricky.&lt;/p&gt;
&lt;p&gt;First we should switch into the chezmoi directory with&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chezmoi cd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we should go into the &lt;code&gt;private_dot_ssh&lt;/code&gt; folder where there is likely already a &lt;code&gt;id_rsa.pub&lt;/code&gt; file but we need to create a &lt;code&gt;private_id_rsa.tmpl&lt;/code&gt; file for managing the private key.&lt;/p&gt;
&lt;p&gt;Now we should create the file with the following contents:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{ gopass &amp;#34;SSH/id_rsa&amp;#34; | b64dec }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &amp;ldquo;SSH/id_rsa&amp;rdquo; is the name of the file inside of gopass and &lt;code&gt;gopass&lt;/code&gt; and &lt;code&gt;b64dec&lt;/code&gt; are chezmoi functions. &lt;code&gt;gopass&lt;/code&gt; is the function to get the secret from gopass and then we pipe it into the &lt;code&gt;b64dec&lt;/code&gt; function which decodes the Base64 string.&lt;/p&gt;
&lt;h3 id=&#34;applying-it&#34;&gt;Applying it&lt;/h3&gt;
&lt;p&gt;This is a part I nearly forgot and which can lead to confusion. We should first &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; our changes in the Git Repo, then we can test our template file by running&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chezmoi execute-template &amp;lt; private_id_rsa.tmpl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;after this the most important step is to run&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chezmoi apply
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to actually apply our changes and if you already setup chezmoi update on other machines with gopass you will need to run&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chezmoi update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on these other machines to pull the changes and directly apply them.&lt;/p&gt;
&lt;p&gt;That was it! Now we have a nice setup where we can save sensitive data in gopass and then keep our Dotfiles up-to-date on all machines with chezmoi.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
